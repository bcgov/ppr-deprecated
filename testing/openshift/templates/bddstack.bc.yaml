# Build config for Jenkins BDDStack functional testing
#
# Process this file, creating or replacing imagestreams and builds
# $ oc process -f openshift/bddstack.bc.yaml | oc [create|replace] -n <PROJECT> -f -
#
apiVersion: v1
kind: Template
metadata:
  name: bddstack
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: bddstack
      labels:
        build: bddstack
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewBuild
      labels:
        build: bddstack
      name: bddstack
    spec:
      output:
        to:
          kind: ImageStreamTag
          name: bddstack:latest
      source:
        contextDir: provisioning/jenkins-slaves/scanandtest
        dockerfile: |
          FROM registry.access.redhat.com/openshift3/jenkins-slave-base-rhel7

          # Note this is based mostly on https://github.com/sclorg/s2i-python-container/blob/master/3.5/Dockerfile.rhel7

          EXPOSE 8080

          ENV SUMMARY="Jenkins slave with python 37, nodejs 8, Java, BDDStack" \
              DESCRIPTION="Jenkins pipeline slave with python 37, nodejs 8, Java 11 and BDDStack installed. A veritable Swiss army knife"

          LABEL summary="$SUMMARY" \
              description="$DESCRIPTION" \
              io.k8s.description="$DESCRIPTION" \
              io.k8s.display-name="Jenkins-Pipeline-ScanAndTest" \
              io.openshift.expose-services="8080:http" \
              io.openshift.tags="builder,jenkins-jnlp-python,jenkins-jnlp-nodejs,jenkins-jnlp, jenkins-jnlp-bddstack, jenkins-jnlp-scan" \
              release="1"

          ENV PYTHON_VERSION=3.7 \
              PATH=$HOME/.local/bin/:$PATH \
              PYTHONUNBUFFERED=1 \
              PYTHONIOENCODING=UTF-8 \
              LC_ALL=en_US.UTF-8 \
              LANG=en_US.UTF-8 \
              PIP_NO_CACHE_DIR=off \
              BASH_ENV=/usr/local/bin/scl_enable \
              ENV=/usr/local/bin/scl_enable \
              PROMPT_COMMAND=". /usr/local/bin/scl_enable"

          COPY contrib/bin/scl_enable /usr/local/bin/scl_enable

          # We need to call 2 (!) yum commands before being able to enable repositories properly
          # This is a workaround for https://bugzilla.redhat.com/show_bug.cgi?id=1479388
          RUN yum repolist > /dev/null && \
              yum install -y yum-utils && \
              yum-config-manager --disable \* &> /dev/null && \
              yum-config-manager --enable rhel-server-rhscl-7-rpms && \
              yum-config-manager --enable rhel-7-server-rpms && \
              yum-config-manager --enable rhel-7-server-optional-rpms && \
              yum-config-manager --enable rhel-7-server-fastrack-rpms && \
              UNINSTALL_PKGS="java-1.8.0-openjdk java-1.8.0-openjdk-devel java-1.8.0-openjdk-headless.i686" &&\
              INSTALL_PKGS="rh-python37 rh-python37-python-devel rh-python37-python-setuptools rh-python37-python-pip \
              nss_wrapper httpd24 httpd24-httpd-devel httpd24-mod_ssl httpd24-mod_auth_kerb httpd24-mod_ldap httpd24-mod_session \
              atlas-devel gcc-gfortran libffi-devel libtool-ltdl rh-nodejs8 rh-nodejs8-nodejs-nodemon \
              java-11-openjdk java-11-openjdk-devel redhat-lsb libXScrnSaver gdk-pixbuf2 xorg-x11-server-Xvfb wget" && \
              ln -s /usr/lib/node_modules/nodemon/bin/nodemon.js /usr/bin/nodemon && \
              yum remove -y $UNINSTALL_PKGS &&\
              yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && \
              rpm -V $INSTALL_PKGS && \
              yum clean all -y && \
              # Get Google Chrome latest version
              wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm && \
              yum -y localinstall google-chrome-stable_current_x86_64.rpm && \
              rm google-chrome-stable_current_x86_64.rpm && \
              if [ ! -d /home/jenkins/.pki ] ; then mkdir /home/jenkins/.pki; fi && \
              chmod 777 /home/jenkins/.pki

          # In order to drop the root user, we have to make some directories world
          # writable as OpenShift default security model is to run the container under
          # random UID.
          RUN mkdir -p /opt/app-root  && \
              chown -R 1001:0 /opt/app-root && \
              chmod -R og+rwx /opt/app-root && \
              # Obtain the installed Chrome version so that BDDStack can load the correct driver by querying the chromeversion and chromedriver files    
              google-chrome --version | grep -o -m 1 -E "[0-9]{2,3}[^ ^a-z^A-Z^0-9^\.]*" | sed -n 1p >  /opt/app-root/chromeversion && \
              wget https://chromedriver.storage.googleapis.com/LATEST_RELEASE_`cat /opt/app-root/chromeversion` -O  /opt/app-root/chromedriver 

          USER 1001

        git:
          ref: Testing-and-Scanning-Swiss-Army-Knife-Slave
          uri: "https://github.com/rstens/openshift-tools"
        type: Git
      strategy:
        dockerStrategy:
          env:
            - name: OPENSHIFT_JENKINS_JVM_ARCH
              value: x86_64
          from:
            kind: ImageStreamTag
            name: jenkins-slave-base-rhel7:latest
        type: Docker
      triggers:
        - type: ConfigChange
        - imageChange: {}
          type: ImageChange
