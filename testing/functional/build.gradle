plugins {
    id "idea"
    id "groovy"
    id "com.energizedwork.webdriver-binaries" version "1.4"
    id "com.energizedwork.idea-base" version "1.4"
    id "io.qameta.allure" version "2.8.1"
}

apply from: "gradle/versions.gradle"

repositories {
    mavenCentral()
}

dependencies {
    // If using Spock, need to depend on geb-spock
    testImplementation "org.gebish:geb-spock:$gebVersion"
    testImplementation("org.spockframework:spock-core:$spockVersion") {
        exclude group: "org.codehaus.groovy"
    }
    testImplementation "org.codehaus.groovy:groovy-all:$groovyVersion"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testImplementation "org.gebish:geb-junit4:$gebVersion"

    //Support
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"

    // Drivers
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"

    // Spock reports
    testImplementation( "com.athaydes:spock-reports:$spockreportVersion" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    testImplementation "org.slf4j:slf4j-api:$slf4jVersion"
    testImplementation "org.slf4j:slf4j-simple:$slf4jVersion"
}

webdriverBinaries {
    chromedriver chromeDriverVersion
    geckodriver geckoDriverVersion
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        group JavaBasePlugin.VERIFICATION_GROUP

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty "geb.env", driver
        
        /*
        * Set environment variables from a .env file, if it exists.
        * Equals sign separated key value pairs, one per new line: SOME_KEY=some value
        * These local environment variables take precedence over any environment variables set at the system level.
        */
        def envFile = file('.env')
        if (envFile.exists()) {
        envFile.readLines().each() {
            def (key, value) = it.tokenize('=')
            if (key && value) {
            systemProperty key, value
            }
        }
        }
    }
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}

tasks.withType(Test) {
    maxHeapSize = "1g"
    jvmArgs '-XX:MaxMetaspaceSize=128m'
    testLogging {
        exceptionFormat = 'full'
    }
    systemProperty 'com.athaydes.spockframework.report.outputDir', 'build/reports/spock'
    systemProperty 'com.athaydes.spockframework.report.internal.HtmlReportCreator.inlineCss', false
    systemProperty 'com.athaydes.spockframework.report.projectName',"Personal Property Registry"    
}

tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.memoryMaximumSize = '256m'
}

allure {
    version = '2.8.1'
    aspectjweaver = true
    autoconfigure = true
    
    resultsDir = file('allure-results')
    reportDir = file('allure-reports')
    
    useSpock {
       version = '2.0-BETA10'
    }
    
    downloadLink = 'https://dl.bintray.com/qameta/generic/io/qameta/allure/allure/2.8.1/allure-2.8.1.zip'
}
