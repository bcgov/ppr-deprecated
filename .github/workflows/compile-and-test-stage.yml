name: Compile and Unit Test

on: [push, pull_request]

jobs:
  ppr-api-build:
    runs-on: ubuntu-latest

    env:
      PPR_API_DB_HOSTNAME: localhost
      PPR_API_DB_PORT: 5432
      PPR_API_DB_NAME: ppr
      PPR_API_DB_USERNAME: postgres
      PPR_API_DB_PASSWORD: int_test_pw
      DB_PASSWORD: int_test_pw

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install dependencies
        working-directory: ppr-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install .
      - name: Lint Python Source
        working-directory: ppr-api
        run: |
          pylint -E src
          pylint -E --disable=E1101 migrations
          flake8 src migrations tests *.py
      - name: Execute Unit Tests with PyTest
        working-directory: ppr-api
        run: |
          pytest
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          flags: python_unittests
          fail_ci_if_error: false
      # Run the PPR-API integration tests.  If we find this takes too long, we may consider moving these steps into a
      # separate workflow
      - name: Start a PostgreSQL database with docker-compose
        run: |
          ./ready_local_db.sh
      - name: Execute Integration Tests with PyTest
        working-directory: ppr-api
        run: |
          alembic upgrade head
          pytest tests/integration
      - name: Shutdown docker-compose
        run: |
          docker-compose down

  ims-api-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Compile and execute tests
        working-directory: ims-api
        run: |
          ./gradlew test

  ppr-ui-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
      - run: npm ci
        working-directory: ppr-ui
      - run: npm run lint -- --no-fix
        working-directory: ppr-ui
      - run: npm run test:unit:cov
        working-directory: ppr-ui
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: false
